#!/bin/bash
VARS_MIN=$1
VARS_MAX=$2
MODELS_EQ=$3

export DIR=$( cd "$( dirname "$0" )/.." && pwd )

function CtoM(){
    local C=("$@")
    local M=""
    for ((i = 0; i < ${#C[@]}; i++)); do
        if [ ${C[$i]} -eq 1 ]; then
            M="$M,$i"
        fi
        M=${M#","}
    done
    echo $M
}
export -f CtoM;

function binary(){
    return eval "printf '%0${1}d' $(echo 'obase=2;$2' | bc)" | sed 's:\(.\):\1\ :g'
}

function set_permutations(){
    local MODELS=$1
    local ones=$2
    local C=()
    for ((i = 0; i < $ones; i++)); do
        C[$i]=1
    done
    for ((i = $ones; i < $MODELS; i++)); do
        C[$i]=0
    done

    count=0
    local M=()
    while [ 1 ]; do
        M[$count]=$(CtoM ${C[@]})

        changed=0
        for ((i = 0; i < ${#C[@]}-1; i++)); do
            j=$(($i+1))
            if [ ${C[$i]} -eq 1 -a ${C[$j]} -eq 0 ]; then
                C[$i]=0
                C[$j]=1
                changed=1
                break
            fi
        done
        [ $changed -eq 0 ] && break

        count=$((count+1))
    done
    echo "${M[@]}"
}
export -f set_permutations;

function run(){
    local vars=$1
    local m=$2
    local PYOUTPUT=$($DIR/pylibs/qm.py -v$vars -o$m)
    local COUTPUT=$($DIR/bin/qm -v$vars -o$m)

    local SOLUTION=$(echo -e "$PYOUTPUT" | grep "$(echo -e "$COUTPUT"| tail -1)")
    if [ "$COUTPUT" == "" -o "$SOLUTION" == "" ]; then
        echo "=============================================="
        echo -e "options: -v$vars -o$m\n"
        echo -e "    PY: \n$PYOUTPUT"
        echo -e "----------------------------------------------"
        echo -e "    C : \n$COUTPUT"
        echo
#    else
#        echo -e " -v$vars -o$m $SOLUTION"
    fi
}
export -f run;

function runall(){
    local vars=$1
    local models=$2
    local ones=$3

    echo "  ($ones/$models)"
    parallel --load 100% -k run $vars {} ::: $(set_permutations $models $ones)
}
export -f runall;

for ((VARS=VARS_MIN; VARS < VARS_MAX; VARS++)); do
    echo "===> VARIABLES: $VARS"
    export MODELS=$(echo "2^$VARS" | bc)

    sequence=$(seq 2 $(($MODELS-1)))
    [ "$MODELS_EQ" != "" ] && sequence=$MODELS_EQ
    parallel --load 100% -k runall $VARS $MODELS {} ::: $sequence
done
echo

